/*
Дано число N < 10^6 и последовательность целых чисел из [-2^31..2^31] длиной N.
Требуется построить бинарное дерево, заданное наивным порядком вставки.
Т.е., при добавлении очередного числа K в дерево с корнем root,
если root>Key ? K, то узел K добавляется в правое поддерево root;
иначе в левое поддерево root.
Выведите элементы в порядке pre-order (сверху вниз).
Рекурсия запрещена.
*/

#include<iostream>
#include<stack>
#include<queue>

template<typename T>
struct Node {
	T val;
	Node<T>* left;
	Node<T>* right;
	Node<T>(T val) {
		this->left = NULL;
		this->right = NULL;
		this->val = val;
	}
};

template<class T>
class BinTree {
public:
	explicit BinTree() {
		tree_root = NULL;
		tree_size = 0;
	};
	BinTree(const BinTree&) = delete;
 	BinTree& operator=(const BinTree&) = delete;

	~BinTree() {
		if (tree_root != NULL) {
			std::queue<Node<T>*> q;
			q.push(tree_root);
			while (!q.empty()) {
				if (q.front()->left != NULL) {
					q.push(q.front()->left);
				}
				if (q.front()->right != NULL) {
					q.push(q.front()->right);
				}
				delete q.front();
				q.pop();
			}
		}
	}

	void AddElement(T Val) {
		Node<T>* newnode = new Node<T>(Val);
		if (tree_root == NULL) {
			tree_root = newnode;
			return;
		}
		Node<T>* iter = tree_root;
		while (true) {
			if (Val >= iter->val) {
				if (iter->right == NULL) {
					iter->right = newnode;
					tree_size++;
					return;
				}
				iter = iter->right;
			}
			else {
				if (iter->left == NULL) {
					iter->left = newnode;
					tree_size++;
					return;
				}
				iter = iter->left;
			}
		}
	}
	// Traverse preorder

	void Traverse_preorder() {
		Node<T>* tptr = tree_root;
		std::stack<Node<T>*> stack;
		if (tptr == NULL) { return; }
		stack.push(tptr);
		while (!stack.empty()) {
			Node<T>* curr = stack.top();
			std::cout << curr->val << " ";
			stack.pop();
			if (curr->right != NULL) {
				stack.push(curr->right);
			}
			if (curr->left != NULL) {
				stack.push(curr->left);
			}
		}
	}
private:
	int tree_size;
	Node<T> *tree_root;
};

int main() {
	int N;
	std::cin >> N;
	BinTree<int> Tree;
	int A;
	for (int i = 0; i < N; i++) {
		std::cin >> A;
		Tree.AddElement(A);
	}
	Tree.Traverse_preorder();
	system("PAUSE");
	return 0;
}
